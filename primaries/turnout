#!/usr/bin/env python
# encoding: utf-8
#
# Copyright (C) 2011 Chris Jerdonek.  All rights reserved.
#
"""
TODO: complete this.

"""

from datetime import datetime
import logging
import sys



_log = logging.getLogger(__name__)

HEADER_LINE_INDEX = 1
FIRST_DATA_ROW_INDEX = 3
NEIGHBORHOOD_COUNT = 27  # add one to include TOTAL.
MAX_NEIGHBORHOOD_LENGTH = len("SEA CLIFF/PRESIDIO HEIGHTS")

CITYWIDE_NEIGHBORHOOD_NAME_CURRENT = "TOTAL"
CITYWIDE_NEIGHBORHOOD_NAME_DESIRED = "CITYWIDE"


def configure_logging(logging_level, sys_stderr=None):
    """Configure logging."""
    if sys_stderr is None:
        sys_stderr = sys.stderr

    formatter = logging.Formatter("%(name)s: [%(levelname)s] %(message)s")

    stream = sys_stderr
    handler = logging.StreamHandler(stream)
    handler.setFormatter(formatter)

    logger = logging.getLogger()  # the root logger.
    logger.setLevel(logging_level)
    logger.addHandler(handler)

    _log.debug("Debug logging enabled.")


def write_csv(path, rows):
    """
    Write a list of lists to a file.

    """
    with open(path, "w") as f:
        for row in rows:
            line = [str(data) for data in row]
            line = ",".join(line)
            f.write(line)


def average(seq):
    seq = filter(lambda x: x is not None, seq)
    if 0 in seq:
        raise Exception("zero")
    return sum(seq) / len(seq)

class DateAccess(object):

    def __init__(self, dates):
        dates = list(dates)
        dates.sort()

        spring_dates = []
        years = {}

        i = 0
        while i < len(dates):
            spring = dates[i]
            general = dates[i + 1]
            spring_dates.append(spring)
            years[spring] = (spring, general)
            i += 2

        self.dates = dates
        self.spring_dates = spring_dates
        self.year_dict = years

    def get_general(self):
        dates = []
        for spring_date in self.spring_dates:
            general = self.year_dict[spring_date][1]
            dates.append(general)
        return dates


class Turnout(object):

    def __init__(self, turnout, registered):
        self.turnout = turnout
        self.registered = registered

    def percent(self):
        if self.registered == 0:
            return None
        return 100.0 * self.turnout / self.registered


class Neighborhood(object):

    def __init__(self, name, date_dict):
        self.date_dict = date_dict
        self.name = name

    def get_flat(self):
        flat = []
        for dt, turnout in self.date_dict.iteritems():
            flat.append((turnout.percent(), dt, self.name))
        return flat

    def get_turnout_percent(self, date):
        turnout = self.date_dict[date]
        return turnout.percent()

    def get_turnout_absolute(self, date):
        turnout = self.date_dict[date]
        return turnout.turnout

    def get_average_turnout(self, dates):
        turnouts = [self.get_turnout_percent(date) for date in dates]
        return average(turnouts)

    def get_average_fall(self, spring_dates, date_access):
        falls = [get_percent_fall(self, date, date_access) for date in spring_dates]
        return average(falls)

    def get_average_fall_absolute(self, spring_dates, date_access):
        falls = [get_absolute_fall(self, date, date_access) for date in spring_dates]
        return average(falls)

    def get_average_voter_fall(self, spring_dates, date_access):
        falls = [get_voter_fall(self, date, date_access) for date in spring_dates]
        return average(falls)

    def display(self, date_access, spring_dates):

        print self.name
        # PRIMARY      PRIMARY GENERAL DROP
        # -----------------------------------
        # 2000-03-07   43.2%   69.3%   37.7%


        print "PRIMARY      PRIMARY  GENERAL  DROP"
        print "------------------------------------"
        for date in spring_dates:
            spring, general = date_access.year_dict[date]
            percents = [self.get_turnout_percent(spring),
                        self.get_turnout_percent(general),
                        get_percent_fall(self, date, date_access)]
            percents = [format_percent(percent) for percent in percents]

            s = "%s   %s" % (format_date(date), "    ".join(percents))
            print s
        percents = [self.get_average_turnout(spring_dates),
                    self.get_average_turnout(date_access.get_general()),
                    self.get_average_fall(spring_dates, date_access)]
        percents = [format_percent(percent) for percent in percents]
        #                "2000-03-07"
        s = "%s   %s" % ("AVERAGE   ", "    ".join(percents))
        print
        print s
        print


def parse_dates(line):
    dates = []
    fields = line.split(",")
    for field in fields:
        if not field:
            continue
        dt = datetime.strptime(field, "%Y-%m-%d")
        dates.append(dt)

    return dates


def parse_neighborhoods(lines, dates):
    """
    Return the list of neighborhoods, and the city-wide "neighborhood."

    """
    nbhds = []
    citywide_nbhd = None
    for line in lines[FIRST_DATA_ROW_INDEX:FIRST_DATA_ROW_INDEX + NEIGHBORHOOD_COUNT]:
        fields = line.split(",")
        nbhd_name = fields.pop(0)
        date_dict = {}
        for date in dates:
            registered = int(fields.pop(0))
            turnout = int(fields.pop(0))
            date_dict[date] = Turnout(turnout, registered)

        nbhd = Neighborhood(nbhd_name, date_dict)

        if nbhd_name == CITYWIDE_NEIGHBORHOOD_NAME_CURRENT:
            nbhd.name = CITYWIDE_NEIGHBORHOOD_NAME_DESIRED
            citywide_nbhd = nbhd

        nbhds.append(nbhd)

    return nbhds, citywide_nbhd


def get_percent_fall(nbhd, spring_date, date_access):
    """
    Return the percent by which turnout falls from the general to primary.

    """
    dates = date_access.year_dict[spring_date]
    spring_percent, general_percent = [nbhd.get_turnout_percent(date) for date in dates]
    if spring_percent == None or general_percent == None:
        return None

    return 100.0 * (1 - spring_percent / general_percent)
    #return general_percent - spring_percent

def get_absolute_fall(nbhd, spring_date, date_access):
    """
    Return the percent by which turnout falls from the general to primary.

    """
    dates = date_access.year_dict[spring_date]
    spring, general = [nbhd.get_turnout_absolute(date) for date in dates]
    if spring == None or not general:
        return None

    return 100.0 * (1 - 1.0 * spring / general)

def get_voter_fall(nbhd, spring_date, date_access):
    """
    Return the percent by which turnout falls from the general to primary.

    """
    dates = date_access.year_dict[spring_date]
    spring, general = [nbhd.get_turnout_absolute(date) for date in dates]
    if spring == None or not general:
        return None

    return general - spring


def get_average_percent_fall(nbhd, date_access):
    stats = get_primary_fractions(nbhd, date_access)

    avg = average(map(lambda x: x[0], stats))

    return [(avg, nbhd)]


def get_primary_fractions(nbhd, date_access):
    stats = []
    for spring_date in date_access.year_dict.keys():
        fraction = get_primary_fraction(nbhd, spring_date, date_access)
        if fraction is None:
            continue
        stat = (fraction, spring_date, nbhd)
        stats.append(stat)
    return stats

def get_average_primary_fraction(nbhd, date_access):
    stats = get_primary_fractions(nbhd, date_access)

    avg = average(map(lambda x: x[0], stats))

    return [(avg, nbhd)]

def format_percent(percent):
    if percent is None:
        return "  N/A"
    return "%.1f%%" % percent

def format_date(dt):
    return dt.strftime("%Y-%m-%d")

def format_name(name):
    return name.ljust(MAX_NEIGHBORHOOD_LENGTH)

def get_stat_list(nbhds, func):
    stats = []
    for nbhd in nbhds:
        stat = (func(nbhd), nbhd)
        stats.append(stat)
    stats.sort()

    return stats


class AbsoluteFallStat(object):

    def __init__(self, nbhd, spring_dates, date_access):
        self.nbhd = nbhd


def create_sublist(nbhds, citywide_nbhd, general_dates):
    nbhds = list(nbhds)  # Copy since we are sorting.

    # How many from the top and bottom.
    count = 9

    # Sort by general turnout.
    key = lambda nbhd: nbhd.get_average_turnout(general_dates)
    nbhds.sort(key=key)

    nbhds = nbhds[:count] + [citywide_nbhd] + nbhds[-count:]

    return nbhds


def create_rows(nbhds, spring_dates, general_dates):
    first_row = ["Neighborhood", "Spring Turnout", "November Turnout"]

    rows = []
    for nbhd in nbhds:
        row = [nbhd.name, nbhd.get_average_turnout(spring_dates), nbhd.get_average_turnout(general_dates)]
        rows.append(row)

    return rows


def main(sys_argv):
    configure_logging(logging.DEBUG)

    args = sys_argv[1:]

    input_path = args[0]
    output_path = args[1]

    with open(input_path, "rU") as f:
        lines = f.readlines()
        lines = [line.strip() for line in lines]

    header_line = lines[1]
    dates = parse_dates(header_line)
    nbhds, citywide_nbhd = parse_neighborhoods(lines, dates)

    date_access = DateAccess(dates)
    general_dates = date_access.get_general()
    spring_dates = date_access.spring_dates

    nbhds_sublist = create_sublist(nbhds, citywide_nbhd, general_dates)

    rows = create_rows(nbhds_sublist, spring_dates, general_dates)

    write_csv(output_path, rows)
    exit()

    general_func = lambda nbhd: nbhd.get_average_turnout(general_dates)
    spring_func = lambda nbhd: nbhd.get_average_turnout(spring_dates)
    fall_func = lambda nbhd: nbhd.get_average_fall(spring_dates, date_access)
    fall_absolute_func = lambda nbhd: nbhd.get_average_fall_absolute(spring_dates, date_access)

    general_stats = get_stat_list(nbhds, general_func)
    primary_stats = get_stat_list(nbhds, spring_func)
    fall_stats = get_stat_list(nbhds, fall_func)
    fall_stats.reverse()  # So bigger falls are listed first along with smaller turnout.
    fall_absolute_stats = get_stat_list(nbhds, fall_absolute_func)
    fall_absolute_stats.reverse()  # So bigger falls are listed first along with smaller turnout.


    def format_stat(stat, spring_dates, date_access):
        percent = stat[0]
        nbhd = stat[1]
        s = "%s %s" % (format_percent(percent), format_name(nbhd.name))
        return s

    for zipped in zip(fall_stats, fall_absolute_stats):
    #for zipped in zip(fall_stats, primary_stats, general_stats):
        formatted = [format_stat(stat, spring_dates, date_access) for stat in zipped]
        s = " ".join(formatted)
        nbhd = zipped[1][1]
        voter_fall = nbhd.get_average_voter_fall(spring_dates, date_access)
        s += (" %s" % voter_fall).rjust(7)
        print s
    exit()

    for stat in stats:
        #percent, dt, name = stat
        percent, nbhd = stat
        if percent is None:
            continue
        #print format_percent(percent), format_date(dt), name
        percents = [format_percent(nbhd.get_turnout_percent(date)) for date in dates]
        print format_percent(percent), format_name(nbhd.name), " ".join(percents)
    print len(stats)
    print len(dates)


    exit()


if __name__ == "__main__":
    main(sys.argv)
